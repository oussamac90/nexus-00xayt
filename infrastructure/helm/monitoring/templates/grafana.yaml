# Grafana Helm Template v6.50.0
# Enterprise-grade Grafana deployment with enhanced security and HA capabilities

{{- $grafana := .Values.grafana -}}
{{- $global := .Values.global -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "grafana.fullname" . }}
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: nexus-platform
spec:
  replicas: {{ $grafana.replicaCount | default 2 }}
  selector:
    matchLabels:
      {{- include "grafana.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        {{- include "grafana.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      serviceAccountName: {{ template "grafana.serviceAccountName" . }}
      securityContext:
        {{- toYaml $grafana.securityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - grafana
              topologyKey: kubernetes.io/hostname
      containers:
      - name: grafana
        image: "{{ $global.imageRegistry }}/grafana/grafana:{{ .Chart.AppVersion }}"
        imagePullPolicy: {{ $global.imagePullPolicy }}
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "grafana.fullname" . }}
              key: admin-password
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_INSTALL_PLUGINS
          value: {{ join "," $grafana.plugins | default "" | quote }}
        volumeMounts:
        - name: config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: storage
          mountPath: /var/lib/grafana
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
        resources:
          {{- toYaml $grafana.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 10
      volumes:
      - name: config
        configMap:
          name: {{ template "grafana.fullname" . }}-config
      - name: storage
        {{- if $grafana.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "grafana.fullname" . }}-storage
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: dashboards
        configMap:
          name: {{ template "grafana.fullname" . }}-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "grafana.fullname" . }}
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    {{- include "grafana.selectorLabels" . | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}-config
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
data:
  grafana.ini: |
    [server]
    root_url = {{ $grafana.rootUrl }}
    [security]
    admin_user = admin
    allow_embedding = false
    [auth]
    disable_login_form = false
    oauth_auto_login = false
    [users]
    allow_sign_up = false
    [dashboards]
    versions_to_keep = 20
    [dataproxy]
    timeout = 30
    logging = false
    [analytics]
    reporting_enabled = false
    check_for_updates = false
    [metrics]
    enabled = true
    [tracing]
    enabled = true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}-dashboards
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
data:
  {{- range $path, $_ := .Files.Glob "dashboards/*.json" }}
  {{ base $path }}: |
    {{- $.Files.Get $path | nindent 4 }}
  {{- end }}
---
{{- if $grafana.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ template "grafana.fullname" . }}-storage
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ $grafana.persistence.size }}
  storageClassName: {{ $grafana.persistence.storageClass | default $global.storageClass }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ template "grafana.fullname" . }}
  labels:
    {{- include "grafana.labels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- include "grafana.selectorLabels" . | nindent 6 }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/part-of: nexus-platform
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443