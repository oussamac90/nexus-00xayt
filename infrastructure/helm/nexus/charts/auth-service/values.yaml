# Default values for auth-service Helm chart
# Production-grade configuration for OAuth2/OIDC authentication service

replicaCount: 2

image:
  repository: ${global.imageRegistry}/auth-service
  tag: latest
  pullPolicy: Always

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: "auth-service"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8081"
  prometheus.io/path: "/auth/actuator/prometheus"

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8081

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: ${global.domain}
      paths:
        - path: /auth
          pathType: Prefix
  tls:
    - secretName: auth-service-tls
      hosts:
        - ${global.domain}

resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 1000m
    memory: 2Gi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - auth-service
          topologyKey: kubernetes.io/hostname

env:
  SPRING_PROFILES_ACTIVE: prod
  SERVER_PORT: "8081"
  SERVER_SERVLET_CONTEXT_PATH: "/auth"

configmap:
  enabled: true
  data:
    application.yml:
      spring:
        application:
          name: auth-service
        security:
          oauth2:
            authorizationserver:
              issuer: http://auth.${global.domain}
              endpoint:
                token:
                  access-token-time-to-live: 3600s
                  refresh-token-time-to-live: 86400s
                  token-format: jwt
      management:
        endpoints:
          web:
            exposure:
              include:
                - health
                - info
                - metrics
                - prometheus
        endpoint:
          health:
            show-details: always

secrets:
  enabled: true
  data:
    JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
    KAFKA_JAAS_CONFIG: ${KAFKA_JAAS_CONFIG}

probes:
  liveness:
    httpGet:
      path: /auth/actuator/health/liveness
      port: 8081
    initialDelaySeconds: 60
    periodSeconds: 15
  readiness:
    httpGet:
      path: /auth/actuator/health/readiness
      port: 8081
    initialDelaySeconds: 30
    periodSeconds: 10

serviceMonitor:
  enabled: true
  path: /auth/actuator/prometheus
  interval: "15s"