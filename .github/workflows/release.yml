name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
      environment:
        description: 'Target environment'
        type: choice
        options:
          - staging
          - production
        required: true

permissions:
  contents: write
  packages: write
  deployments: write
  actions: read
  security-events: write
  id-token: write

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  prepare_release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          if ! [[ "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be x.y.z"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v6
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            });
            return commits.data.map(commit => `* ${commit.commit.message}`).join('\n');

      - name: Create release branch
        run: |
          git checkout -b release/v${{ steps.version.outputs.version }}
          git push origin release/v${{ steps.version.outputs.version }}

  validate_release:
    name: Validate Release
    needs: prepare_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security scan
        uses: ./.github/workflows/security-scan.yml

      - name: Validate dependencies
        run: |
          # Backend dependency validation
          mvn dependency:analyze
          # Frontend dependency validation
          cd src/web && npm audit

      - name: Check compliance requirements
        run: |
          # License compliance check
          mvn license:check
          # Code style validation
          mvn checkstyle:check

  build_artifacts:
    name: Build Release Artifacts
    needs: [prepare_release, validate_release]
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        run: |
          mvn -B clean package -DskipTests
          docker build -t ${{ env.DOCKER_REGISTRY }}/nexus-backend:${{ needs.prepare_release.outputs.version }} .

      - name: Build frontend
        run: |
          cd src/web
          npm ci
          npm run build:prod
          docker build -t ${{ env.DOCKER_REGISTRY }}/nexus-frontend:${{ needs.prepare_release.outputs.version }} .

      - name: Sign artifacts
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import
          find . -type f -name "*.jar" -exec gpg --detach-sign {} \;
          find . -type f -name "*.war" -exec gpg --detach-sign {} \;

  deploy_release:
    name: Deploy Release
    needs: [prepare_release, build_artifacts]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to environment
        uses: ./.github/workflows/deploy.yml
        with:
          environment: ${{ github.event.inputs.environment || 'production' }}
          version: ${{ needs.prepare_release.outputs.version }}

      - name: Verify deployment
        run: |
          chmod +x ./infrastructure/scripts/deploy.sh
          ./infrastructure/scripts/deploy.sh --verify \
            --environment ${{ github.event.inputs.environment || 'production' }} \
            --version ${{ needs.prepare_release.outputs.version }}

  create_release:
    name: Create GitHub Release
    needs: [prepare_release, deploy_release]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare_release.outputs.version }}
          release_name: Release v${{ needs.prepare_release.outputs.version }}
          body: ${{ needs.prepare_release.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: release-artifacts
          asset_content_type: application/zip

  post_release:
    name: Post Release Tasks
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
      - name: Update documentation
        run: |
          # Update API documentation
          # Update changelog
          # Update version references

      - name: Notify stakeholders
        if: success()
        run: |
          # Send release notifications
          # Update status dashboards
          # Create release notes