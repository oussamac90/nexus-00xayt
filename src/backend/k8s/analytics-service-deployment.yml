# Kubernetes v1.27+
# Istio v1.18+
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: nexus
  labels:
    app: analytics-service
    version: 1.0.0
    component: trade-intelligence
  annotations:
    description: "Analytics Service for trade intelligence and market analytics processing"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        sidecar.istio.io/inject: "true"
      labels:
        app: analytics-service
        version: 1.0.0
    spec:
      # Security Context for Pod
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        readOnlyRootFilesystem: true
      
      serviceAccountName: analytics-service
      
      # Pod distribution strategy
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - analytics-service
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: analytics-service
        image: nexus/analytics-service:1.0.0
        imagePullPolicy: Always
        
        # Container ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Resource allocation optimized for AI workloads
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        
        # Enhanced health checks
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 30
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        
        # Environment variables
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: SERVER_PORT
          value: "8080"
        - name: MANAGEMENT_SERVER_PORT
          value: "9090"
        
        # Volume mounts for temporary data
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
          readOnly: false
      
      # Volumes definition
      volumes:
      - name: tmp-volume
        emptyDir: {}
      
      # Pod termination grace period
      terminationGracePeriodSeconds: 60