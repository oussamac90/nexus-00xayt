apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: nexus
  labels:
    app: payment-service
    version: 1.0.0
    pci-compliant: "true"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "payment-service"
    vault.hashicorp.com/agent-pre-populate-only: "true"
    sidecar.istio.io/inject: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: payment-service
      pci-compliant: "true"
  template:
    metadata:
      labels:
        app: payment-service
        version: 1.0.0
        pci-compliant: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "payment-service"
        vault.hashicorp.com/agent-pre-populate-only: "true"
    spec:
      serviceAccountName: payment-service-sa
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      containers:
      - name: payment-service
        image: nexus.azurecr.io/payment-service:1.0.0
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        ports:
        - name: http
          containerPort: 8085
          protocol: TCP
        resources:
          requests:
            cpu: "1000m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "2Gi"
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: KAFKA_SERVERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: bootstrap.servers
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: host
        envFrom:
        - secretRef:
            name: payment-secrets
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8085
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8085
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8085
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 30
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: payment-secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: vault-secrets
          mountPath: /vault/secrets
          readOnly: true
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
          sizeLimit: 256Mi
      - name: payment-secrets
        secret:
          secretName: payment-secrets
          defaultMode: 420
      - name: vault-secrets
        emptyDir:
          medium: Memory
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - payment-service
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pci-compliant
                operator: In
                values:
                - "true"
      nodeSelector:
        pci-compliant: "true"
        node.kubernetes.io/instance-type: c5.xlarge
      tolerations:
      - key: pci-workload
        operator: Equal
        value: "true"
        effect: NoSchedule
      terminationGracePeriodSeconds: 60